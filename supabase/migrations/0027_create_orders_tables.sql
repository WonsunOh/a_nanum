-- 주문 정보를 저장하는 'orders' 테이블
CREATE TABLE public.orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    user_id UUID NOT NULL REFERENCES auth.users(id),
    total_amount INT NOT NULL,
    shipping_fee INT NOT NULL,
    status TEXT NOT NULL DEFAULT 'pending', -- 'pending', 'paid', 'preparing', 'shipped', 'delivered', 'cancelled'
    recipient_name TEXT NOT NULL,
    recipient_phone TEXT NOT NULL,
    shipping_address TEXT NOT NULL
);

-- 주문에 포함된 개별 상품들을 저장하는 'order_items' 테이블
CREATE TABLE public.order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE,
    product_id BIGINT NOT NULL REFERENCES public.products(id),
    quantity INT NOT NULL CHECK (quantity > 0),
    price_per_item INT NOT NULL -- 주문 시점의 상품 가격을 기록 (나중에 상품 가격이 바뀌어도 주문 내역은 유지)
);

-- RLS(행 수준 보안) 활성화
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;

-- 사용자는 자신의 주문 정보만 볼 수 있도록 정책 추가
CREATE POLICY "Users can see their own orders"
ON public.orders FOR SELECT
USING ( auth.uid() = user_id );

CREATE POLICY "Users can see their own order items"
ON public.order_items FOR SELECT
USING ( (SELECT user_id FROM public.orders WHERE id = order_id) = auth.uid() );